raw= read.dta(file, convert.dates = TRUE, convert.factors = TRUE,
missing.type = FALSE,
convert.underscore = FALSE, warn.missing.labels = TRUE)
library(foreign, lib.loc = "C:/Program Files/R/R-3.6.2/library")
raw= read.dta(file, convert.dates = TRUE, convert.factors = TRUE,
missing.type = FALSE,
convert.underscore = FALSE, warn.missing.labels = TRUE)
raw= read.dta("D:\Desktop\UHIP1999.dta")
raw= read.dta("D:/Desktop/UHIP1999.dta")
raw
summary(raw)
View(raw)
tail(raw)
tail(raw[city])
tail(raw["city"])
df
str(df)
df <-as.data.frame(raw)
str(df)
library(tidyverse)
install.packages("tidyverse")
View(raw)
View(df)
select(city)
library(tidyverse)
select(city)
head(df)
library(magrittr)
select(mutated,county,urban_or_not)
mutated<- dplyr::mutate(urban_or_not = ifelse(county %in% c(,3), 1, 0)
mutated<- dplyr::mutate(df, urban_or_not = ifelse(county %in% c(,3), 1, 0)
mutated<- dplyr::mutate(df, urban_or_not = ifelse(county %in% c(1,3), 1, 0)
mutated<- dplyr::mutate(df, urban_or_not = ifelse(county %in% c(1,3), 1, 0))
head(df)
df[county]
select(df, county)
hist(select(df, county))
plot(select(df, county))
table(select(df, county))
count(select(df, county))
table(select(df, county))
View(df)
table(select(df, a104))
mutated<- dplyr::mutate(df, urban_or_not = ifelse(df$a104 %in% c(1,3), 1, 0))
select(mutated,county,urban_or_not)
select(mutated,county,urban_or_not, a105)
select(mutated,county,urban_or_not, a105 as "gender")
mutated<- dplyr::mutate(mutated, ever_treated = ifelse(df$a111 = 1, 1 , 0))
mutated<- dplyr::mutate(mutated, ever_treated = ifelse(df$a111 == 1, 1 , 0))
mutated<- dplyr::mutate(mutated, ln_income = log(df$a201))
mutated<- dplyr::mutate(mutated, ln_income = log(df$a201))
# county id, urban or not boolean, gender id,
# age less than 26, ever treated boolean, education id
# ln income, year that are either 0 or 1
output = select(mutated,county,urban_or_not, a105, a106, ever_treated,a112, ln_income, a128)
output
subset(output, a106<=26 $year %in%c(0,1))
subset(output, a106<=26 $year<=1)
mutated<- dplyr::filter(mutated, a106<=26)
mutated<- dplyr::filter(mutated, a128%in%c(0,1))
# county id, urban or not boolean, gender id,
# age less than 26, ever treated boolean, education id
# ln income, year that are either 0 or 1
output = select(mutated,county,urban_or_not, a105, a106, ever_treated,a112, ln_income, a128)
output
mutated<- dplyr::mutate(df, urban_or_not = ifelse(df$a104 %in% c(1,3), 1, 0))
mutated<- dplyr::mutate(mutated, ever_treated = ifelse(df$a111 == 1, 1 , 0))
mutated<- dplyr::mutate(mutated, ln_income = log(df$a201))
mutated<- dplyr::filter(mutated, a106<=26)
mutated<- dplyr::filter(mutated, a128%in%c(0,1))
# county id, urban or not boolean, gender id,
# age less than 26, ever treated boolean, education id
# ln income, year that are either 0 or 1
output = select(mutated,county,urban_or_not, a105, a106, ever_treated,a112, ln_income, a128)
output
output = rename(outputa105 = gender, a106 = age, a112 = education, a128 = year)
output = rename(outputa105 = "gender", a106 = age, a112 = education, a128 = year)
output = dplyr::rename(outputa105 = "gender", a106 = age, a112 = education, a128 = year)
output = dplyr::rename(output,a105 = "gender", a106 = age, a112 = education, a128 = year)
output = dplyr::rename(output,gender=a105 ,age= a106 ,  education = a112,  year=a128)
output
write.csv(output,"D:/Desktop/pqx.csv", row.names = TRUE )
price = 1200 # current price of the bond
C = 40 # coupon payment
T= 30 # time to maturity
par = 1000 # par value of the bond
r = seq(0.02, 0.05, length = 300)
value = bondvalue(C, T, r, par)
yield2M = spline(value, r, xout = price) # spline interpolation
value = bondvalue(C, T, r, par)
bondvalue = function(c, T, r, par)
{
# Computes bv = bond values (current prices) corresponding
# to all values of yield to maturity in the
# input vector r
#
# INPUT
# c = coupon payment (semiannual)
# T = time to maturity (in years)
# r = vector of yields to maturity (semiannual rates)
# par = par value
#
bv = c / r + (par - c / r) * (1 + r)^(-2 * T)
bv
}
value = bondvalue(C, T, r, par)
yield2M = spline(value, r, xout = price) # spline interpolation
plot(r, value, xlab = ’yield to maturity’, ylab = ’price of bond’,
type = "l", main = "par = 1000, coupon payment = 40,T = 30", lwd = 2)
plot(r, value, xlab = ’yield to maturity’, ylab = ’price of bond’,type = "l", main = "par = 1000, coupon payment = 40,T = 30", lwd = 2)
plot(r, value, xlab = 'yield to maturity', ylab = 'price of bond',type = "l",
main = "par = 1000, coupon payment = 40,T = 30", lwd = 2)
abline(h = 1200)
abline(v = yield2M)
uniroot(function(r) r^2 - .5, c(0.7, 0.8))
uniroot(bondvalue,c(0.03, 0.04))
uniroot(function(r) bondvalue(r),c(0.03, 0.04))
uniroot(function(r) c / r + (par - c / r) * (1 + r)^(-2 * T),c(0.03, 0.04))
uniroot(function(r) c/r +(1000 - 40/r)*(1 + r)^(-2 * 30),c(0.03, 0.04))
uniroot(function(r) 40/r +(1000 - 40/r)*(1 + r)^(-2 * 30),c(0.03, 0.04))
uniroot(function(r) 40/r +(1000 - 40/r)*(1 + r)^(-2 * 30),c(0.03, 0.07))
uniroot(function(r) 40/r +(1000 - 40/r)*(1 + r)^(-2 * 30),c(0.03, 1))
uniroot(function(r) 40/r +(1000 - 40/r)*(1 + r)^(-2 * 30)-1,c(0.03, 1))
uniroot(function(r) 40/r +(1000 - 40/r)*(1 + r)^(-2 * 30)-1200,c(0.03, 1))
uniroot(function(r) 280/r +(10000 - 280/r)*(1 + r)^(-2 * 8)-9800,c(0.03, 1))
uniroot(function(r) 280/r +(10000 - 280/r)*(1 + r)^(-2 * 8)-9800,c(0, 100)
uniroot(function(r) 280/r +(10000 - 280/r)*(1 + r)^(-2 * 16)-9800,c(0, 100)
uniroot(function(r) 280/r +(10000 - 280/r)*(1 + r)^(-2 * 16)-9800,c(0, 100))
uniroot(function(r) 280/r +(10000 - 280/r)*(1 + r)^(-2 * 16)-9800,c(0, 10))
uniroot(function(r) 35/r +(1000 - 35/r)*(1 + r)^(-2 * 40)-1050,c(0, 10))
uniroot(function(r) 35/r +(1000 - 35/r)*(1 + r)^(-2 * 40)-1050,c(0, 1))
uniroot(function(r) 35/r +(1000 - 35/r)*(1 + r)^(-2 * 40)-1050,c(0, 0.05))
uniroot(function(r) 35/r +(1000 - 35/r)*(1 + r)^(-2 * 40)-1050,c(0.01, 0.05))
uniroot(function(r) 25/r +(1000 - 25/r)*(1 + r)^(-2 * 8)-1015,c(0.01, 0.05))
dat = read.csv("Stock_Bond.csv", header = T)
prices = cbind(dat$GM_AC, dat$F_AC, dat$CAT_AC, dat$UTX_AC,
dat$MRK_AC, dat$IBM_AC)
##################problem 3#############
install.packages("remotes")
remotes::install_github("R-Finance/PortfolioAnalytics")
my_weights =(-0.0097,1.0547, -0.0450)
my_weights =(-0.0097,1.0547, -0.0450)
my_returns = (0.0427, 0.0015, 0.0285)
dot(my_weights, my_returns)
library(geometry)
install.packages("geometry")
library(geometry)
dot(my_weights, my_returns)
my_weights =(-0.0097,1.0547, -0.0450)
my_weights =(-0.0097, 1.0547, -0.0450)
my_weights = (-0.0097, 1.0547, -0.0450)
my_weights = (-0.0097 1.0547 -0.0450)
my_weights = (-0.0097, 1.0547, -0.0450)
my_returns = (0.0427, 0.0015, 0.0285)
my_weights = c(-0.0097, 1.0547, -0.0450)
my_returns = c(0.0427, 0.0015, 0.0285)
dot(my_weights, my_returns)
install.packages("IntroCompFinR", repos="http://R-Forge.R-project.org")
library(IntroCompFinR)
library(xts)
install.packages("xts")
install.packages("quadprog")
install.packages("IntroCompFinR", repos="http://R-Forge.R-project.org")
install.packages("PerformanceAnalytics")
install.packages("IntroCompFinR", repos="http://R-Forge.R-project.org")
library(IntroCompFinR)
my_cov_mat= matrix( c( 0.1000, 0.0018,  0.0011, 0.0018, 0.1044, 0.0026, 0.0011,0.0026,0.1411), # the data elements
nrow=3,              # number of rows
ncol=3,              # number of columns
byrow = TRUE)        # fill matrix by rows
my_cov_mat
globalMin.portfolio(my_returns,my_cov_mat)
efficient.portfolio(my_returns, my_cov_mat, 0.07)
tangency.portfolio(my_returns, my_cov_mat, 0.000001)
my_cov_mat= matrix( c( 0.1000, 0.0018,  0.0011,0,
0.0018, 0.1044, 0.0026,0,
0.0011,0.0026,0.1411,0,
0,0,0,0), # the data elements
nrow=4,              # number of rows
ncol=4,              # number of columns
byrow = TRUE)
my_returns = c(0.0427, 0.0015, 0.0285,0.000001)
efficient.portfolio(my_returns, my_cov_mat, 0.07)
my_cov_mat= matrix( c( 0.1000, 0.0018,  0.0011,0,
0.0018, 0.1044, 0.0026,0,
0.0011,0.0026,0.1411,0,
0,0,0,1), # the data elements
nrow=4,              # number of rows
ncol=4,              # number of columns
byrow = TRUE)
my_returns = c(0.0427, 0.0015, 0.0285,0.000001)
efficient.portfolio(my_returns, my_cov_mat, 0.07)
my_cov_mat= matrix( c( 0.1000, 0.0018,  0.0011, 0.0018, 0.1044, 0.0026, 0.0011,0.0026,0.1411), # the data elements
nrow=3,              # number of rows
ncol=3,              # number of columns
byrow = TRUE)        # fill matrix by rows
my_returns=c(0.0427, 0.0015, 0.0285)
efficient.portfolio(my_returns, my_cov_mat, 0.0015)
efficient.portfolio(my_returns, my_cov_mat, 0.0427)
my_cov_mat= matrix( c( 0.1000, 0.0018,  0.0011,0,
0.0018, 0.1044, 0.0026,0,
0.0011,0.0026,0.1411,0,
0,0,0,1), # the data elements
nrow=4,              # number of rows
ncol=4,              # number of columns
byrow = TRUE)
my_returns = c(0.0427, 0.0015, 0.0285,0.000001)
efficient.portfolio(my_returns, my_cov_mat, 0.0427)
############7.13#########
berndtInvest <-read.csv(file.choose(), header = TRUE)
############7.13#########
berndtInvest <-read.csv(file.choose(), header = TRUE)
############7.13#########
berndtInvest =read.csv(file.choose(), header = TRUE)
berndtInvest
############7.13#########
berndtInvest =read.csv(file.choose(),sep = ";", header = TRUE)
berndtInvest
Berndt = as.matrix(berndtInvest[, 2:5])
cov(Berndt)
cor(Berndt)
pairs(Berndt)
library(mnormt) # needed for dmt
library(MASS, lib.loc = "C:/Program Files/R/R-3.6.2/library")
install.packages("mnormt")
library(MASS) # need for mvrnorm
par(mfrow=c(1,4))
N = 2500
nu = 3
set.seed(5640)
cov=matrix(c(1, 0.8, 0.8, 1), nrow = 2)
x= mvrnorm(N, mu = c(0, 0), Sigma = cov)
w = sqrt(nu / rchisq(N, df = nu))
x = x * cbind(w, w)
plot(x, main = "(a)")
set.seed(5640)
cov=matrix(c(1, 0.8, 0.8, 1),nrow = 2)
x= mvrnorm(N, mu = c(0, 0), Sigma = cov)
w1 = sqrt(nu / rchisq(N, df = nu))
w2 = sqrt(nu / rchisq(N, df = nu))
x = x * cbind(w1, w2)
plot(x, main = "(b)")
set.seed(5640)
cov=matrix(c(1, 0, 0, 1), nrow = 2)
x= mvrnorm(N, mu = c(0, 0), Sigma = cov)
w1 = sqrt(nu / rchisq(N, df = nu))
w2 = sqrt(nu / rchisq(N, df = nu))
x = x * cbind(w1, w2)
plot(x, main = "(c)")
set.seed(5640)
cov=matrix(c(1, 0, 0, 1), nrow = 2)
x= mvrnorm(N, mu = c(0, 0), Sigma = cov)
w = sqrt(nu / rchisq(N, df = nu))
x = x * cbind(w, w)
plot(x, main = "(d)")
#####problem 7######
library(mnormt)
install.packages("mnormt")
data(CRSPday, package = "Ecdat")
Y = CRSPday[ , c(5, 7)]
loglik = function(par)
{
mu = par[1:2]
A = matrix(c(par[3], par[4], 0, par[5]), nrow = 2, byrow = T)
scale_matrix = t(A) %*% A
df = par[6]
-sum(log(dmt(Y, mean = mu, S = scale_matrix, df = df)))
}
A = chol(cov(Y))
start = as.vector(c(apply(Y, 2, mean),
A[1, 1], A[1, 2], A[2, 2], 4))
library(Ecdat)
install.packages("Ecdat")
library(mnormt)
library(Ecdat)
data(CRSPday, package = "Ecdat")
Y = CRSPday[ , c(5, 7)]
loglik = function(par)
{
mu = par[1:2]
A = matrix(c(par[3], par[4], 0, par[5]), nrow = 2, byrow = T)
scale_matrix = t(A) %*% A
df = par[6]
-sum(log(dmt(Y, mean = mu, S = scale_matrix, df = df)))
}
A = chol(cov(Y))
start = as.vector(c(apply(Y, 2, mean),
A[1, 1], A[1, 2], A[2, 2], 4))
fit_mvt = optim(start, loglik, method = "L-BFGS-B",
lower = c(-0.02, -0.02, -0.1, -0.1, -0.1, 2),
upper = c(0.02, 0.02, 0.1, 0.1, 0.1, 15), hessian = T)
fit_mvt$hessian
a=1826.3889
w = c(0.5153,0.2,0.1253, 8.54, 3.98, 3.42)
aw
a*w
sum(w)
w = c(0.5153,0.2,0.1253, .0854, .0398, .0342)
a*w
sum(w)
t(a*w)
p  =c(1110,3625,8360,16625,26000,40500)
plot(p)
fit<-lm(y~log(x))
x<-c(1:6)
fit<-lm(p~log(x))
fit
fit2<-lm(p~x^2)
fit2
summary(fit2)
fit2<-lm(p~x^2+x)
fit2
summary(fit2)
setwd("D:/Desktop/CITIC 2020.12/对比sheet")
compA = read.csv('./对比A.csv',header =FALSE)
compA
